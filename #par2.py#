#!/usr/bin/env python
# -*- coding: utf-8 -*-

# All credits go to:
# https://github.com/jmoiron/par2ools/blob/master/par2ools/par2.py

'''
Copyright (c) 2010 Jason Moiron and Contributors

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''


"""A native python implementation of the par2 file format.
This is only intended to be able to read packets in par2, not repair,
verify, or create new par2 files."""


# import sys
import fnmatch
import glob
import os
import re
import struct

PACKET_HEADER = ("<"
                 "8s"   # MAGIC: PAR2\x00PKT
                 "Q"    # unsigned 64bit length of entire packet in bytes
                 "16s"  # md5 of entire packet except first 3 fields
                 "16s"  # 'setid';  hash of the body of the main packet
                 "16s")  # packet type


FILE_DESCRIPTION_PACKET = ("<64s"  # PACKET_HEADER
                           "16s"   # fileid, hash of [hash16k, length, name]
                           "16s"   # hashfull;  hash of the whole file (which?)
                           "16s"   # hash16k;  hash of the first 16k of the file (which?)
                           "Q")    # length of the file


class Header(object):
    fmt = PACKET_HEADER

    def __init__(self, par2file, offset=0):
        self.raw = par2file[offset:offset+struct.calcsize(self.fmt)]
        parts = struct.unpack(self.fmt, self.raw)
        self.magic = parts[0]
        self.length = parts[1]
        self.hash = parts[2]
        self.setid = parts[3]
        self.type = parts[4]

    def verify(self):
        return self.magic == b'PAR2\x00PKT'


class UnknownPar2Packet(object):
    fmt = PACKET_HEADER

    def __init__(self, par2file, offset=0):
        self.raw = par2file[offset:offset+struct.calcsize(self.fmt)]
        self.header = Header(self.raw)


class FileDescriptionPacket(object):
    header_type = b'PAR 2.0\x00FileDesc'
    fmt = FILE_DESCRIPTION_PACKET

    def __init__(self, par2file, offset=0):
        name_start = offset+struct.calcsize(self.fmt)
        self.raw = par2file[offset:name_start]
        parts = struct.unpack(self.fmt, self.raw)
        self.header = Header(parts[0])
        packet = par2file[offset:offset+self.header.length]
        self.fileid = parts[1]
        self.file_hashfull = parts[2]
        self.file_hash16k = parts[3]
        self.file_length = parts[4]
        self.name = packet[struct.calcsize(self.fmt):].strip(b'\x00')


class Par2File(object):
    def __init__(self, obj_or_path):
        """A convenient object that reads and makes sense of Par2 blocks."""
        self.path = None
        if isinstance(obj_or_path, str):
            with open(obj_or_path, "rb") as f:
                self.contents = f.read()
                self.path = obj_or_path
        else:
            self.contents = obj_or_path.read()
            if getattr(obj_or_path, 'name', None):
                self.path = obj_or_path.name
        self.packets = self.read_packets()

    def read_packets(self):
        offset = 0
        filelen = len(self.contents)
        packets = []
        while offset < filelen:
            header = Header(self.contents, offset)
            if header.type == FileDescriptionPacket.header_type:
                packets.append(FileDescriptionPacket(self.contents, offset))
            else:
                packets.append(UnknownPar2Packet(self.contents, offset))
            offset += header.length
        return packets

    def filenames(self):
        """Returns the filenames that this par2 file repairs."""
        return [p.name.decode("utf-8") for p in self.packets if isinstance(p, FileDescriptionPacket)]


import subprocess
p2 = "/home/stephan/.ginzibix/incomplete/VORSTDTWEBRS03E02OE1.720p.PAR2"
pp2 = subprocess.call(['par2verify', p2], shell=False, stdout=subprocess.PIPE, stderr=subprocess. PIPE)
sshres = ssh.stdout.readlines()
for ss in sshres:
    


p2 = Par2File("/home/stephan/.ginzibix/incomplete/VORSTDTWEBRS03E02OE1.720p.PAR2")
print("Related Pars:")
print(p2.related_pars())
print(60 * "-")
print("Par2 filenames:")
for p in p2.filenames():
    print("  " + p)

sys,exit()
import rarfile
import glob
import os
import sys
try:
    cwd0 = os.getcwd()
    rardir = '/home/stephan/.ginzibix/incomplete/'
    os.chdir(rardir)
    rarlist = []
    for f in glob.glob("*.rar"):
        rarlist.append(f)
    rarlist.sort()
except:
    pass
os.chdir(cwd0)
rf = rarfile.RarFile(rardir + rarlist[0])
'''for n in rf.volumelist():
    print(n)
rf.extractall(path=None, members=None, pwd=None)
for r in rf.infolist():
    print(r.CRC, r.volume)

'''
# rf.extractall(path=None, members=None, pwd=None)
# do not use extractall: use:
#           unrar e -kb ....part01.rar

ErrList = []
currfile = rarlist[-1]
Err0 = None
try:
    testres = rf.testrar()
except Exception as e:
    errstrlist = str(e).split("\\n")
    errstrlist0 = errstrlist[:]
    Err0 = [str(e)]
    for rf0 in rarlist:
        for err in errstrlist:
            if rf0 in err:
                ErrList.append(rf0)
                errstrlist0.remove(err)

if not Err0:
    print("All ok")
else:
    print("Broken rar files:")
    print(ErrList)
    complete = True
    for err in errstrlist0:
        if "Cannot find volume" in err:
            complete = False
            break
    if complete:
        print("-" * 80)
        print(errstrlist0)
    else:
        print("rar not yet complete!")

# todo
#    during download: unrar t
#    if unrar error --> flag set "par2 download"
#    after all rars are downloaded:
#       if flag "par2 download" set:
#            - par2verify
#            - get missing blocks + download par2vol + repair
#       unrar e -kb ....
